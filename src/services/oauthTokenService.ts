// OAuth Token Service - Automatic token management
import { FacebookOAuthService } from '../api/oauth';
import { saveCredential, getCredentials } from '../firebase/firestore';
import { UserCredentials } from '../firebase/types';

export interface AutoTokenResult {
  success: boolean;
  accessToken?: string;
  error?: string;
  platform: string;
}

export class OAuthTokenService {
  // Get Facebook access token automatically
  static async getFacebookToken(): Promise<AutoTokenResult> {
    try {
      const tokens = FacebookOAuthService.getStoredTokens();
      
      if (!tokens) {
        return {
          success: false,
          error: 'No Facebook OAuth tokens found. Please login with Facebook first.',
          platform: 'facebook'
        };
      }

      // Check if token is expired
      const expirationTime = localStorage.getItem('facebook_oauth_expires');
      if (expirationTime && Date.now() > parseInt(expirationTime)) {
        FacebookOAuthService.clearTokens();
        return {
          success: false,
          error: 'Facebook OAuth token has expired. Please login again.',
          platform: 'facebook'
        };
      }

      return {
        success: true,
        accessToken: tokens.accessToken,
        platform: 'facebook'
      };
    } catch (error) {
      console.error('Error getting Facebook token:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to get Facebook token',
        platform: 'facebook'
      };
    }
  }

  // Auto-save OAuth tokens to credential vault
  static async saveOAuthTokens(userId: string): Promise<void> {
    try {
      const facebookResult = await this.getFacebookToken();
      
      if (facebookResult.success && facebookResult.accessToken) {
        // Save Facebook token to credential vault
        const facebookCredential: UserCredentials = {
          id: `facebook_${userId}`,
          userId: userId,
          platform: 'facebook',
          accessToken: facebookResult.accessToken,
          tokenType: 'oauth',
          expiresAt: new Date(Date.now() + (3600 * 1000)), // 1 hour from now
          createdAt: new Date(),
          updatedAt: new Date(),
          isActive: true,
          metadata: {
            source: 'oauth',
            autoGenerated: true
          }
        };

        await saveCredential(facebookCredential);
        console.log('Facebook OAuth token saved to credential vault');
      }
    } catch (error) {
      console.error('Error saving OAuth tokens:', error);
    }
  }

  // Get all available OAuth tokens
  static async getAllOAuthTokens(): Promise<{
    facebook?: string;
    instagram?: string;
    linkedin?: string;
  }> {
    const tokens: any = {};

    try {
      // Facebook token
      const facebookResult = await this.getFacebookToken();
      if (facebookResult.success) {
        tokens.facebook = facebookResult.accessToken;
      }
    } catch (error) {
      console.error('Error getting Facebook token:', error);
    }

    // Add other platforms as needed
    return tokens;
  }

  // Check if user has OAuth tokens
  static hasOAuthTokens(): boolean {
    return FacebookOAuthService.isAuthenticated();
  }

  // Clear all OAuth tokens
  static clearAllOAuthTokens(): void {
    FacebookOAuthService.clearTokens();
    // Clear other platform tokens as needed
  }

  // Get token for specific platform
  static async getTokenForPlatform(platform: string): Promise<string | null> {
    switch (platform.toLowerCase()) {
      case 'facebook':
        const facebookResult = await this.getFacebookToken();
        return facebookResult.success ? facebookResult.accessToken || null : null;
      
      default:
        console.warn(`OAuth not supported for platform: ${platform}`);
        return null;
    }
  }
}

// Utility function to check if OAuth is available
export const isOAuthAvailable = (): boolean => {
  return OAuthTokenService.hasOAuthTokens();
};

// Auto-connect OAuth tokens when user logs in
export const autoConnectOAuthTokens = async (userId: string): Promise<void> => {
  try {
    await OAuthTokenService.saveOAuthTokens(userId);
    console.log('OAuth tokens auto-connected successfully');
  } catch (error) {
    console.error('Failed to auto-connect OAuth tokens:', error);
  }
};

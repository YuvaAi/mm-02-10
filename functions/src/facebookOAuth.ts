import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';

export const exchangeFacebookCode = functions.https.onRequest(async (req, res) => {
  // Enable CORS
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.status(204).send('');
    return;
  }

  try {
    const { code, redirectUri, userId } = req.body;
    
    if (!code || !redirectUri || !userId) {
      res.status(400).json({
        error: 'Missing required parameters: code, redirectUri, userId'
      });
      return;
    }

    // Get Facebook credentials from environment
    const clientId = process.env.FACEBOOK_APP_ID;
    const clientSecret = process.env.FACEBOOK_APP_SECRET;
    
    if (!clientId || !clientSecret) {
      res.status(500).json({
        error: 'Facebook OAuth configuration missing. Please set FACEBOOK_APP_ID and FACEBOOK_APP_SECRET environment variables.'
      });
      return;
    }

    // Exchange code for access token
    const tokenResponse = await fetch('https://graph.facebook.com/v21.0/oauth/access_token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: clientId,
        client_secret: clientSecret,
        redirect_uri: redirectUri,
        code: code
      })
    });

    const tokenData = await tokenResponse.json();

    if (!tokenResponse.ok) {
      console.error('Facebook token exchange failed:', tokenData);
      res.status(400).json({
        error: tokenData.error?.message || 'Failed to exchange code for token'
      });
      return;
    }

    const accessToken = tokenData.access_token;
    const expiresIn = tokenData.expires_in;

    // Get user info and pages
    const [userResponse, pagesResponse] = await Promise.all([
      fetch(`https://graph.facebook.com/v21.0/me?access_token=${accessToken}`),
      fetch(`https://graph.facebook.com/v21.0/me/accounts?access_token=${accessToken}`)
    ]);

    const userData = await userResponse.json();
    const pagesData = await pagesResponse.json();

    // Get Instagram business accounts
    let instagramInfo = null;
    if (pagesData.data && pagesData.data.length > 0) {
      const firstPage = pagesData.data[0];
      try {
        const instagramResponse = await fetch(
          `https://graph.facebook.com/v21.0/${firstPage.id}?fields=instagram_business_account&access_token=${firstPage.access_token}`
        );
        const instagramData = await instagramResponse.json();
        if (instagramData.instagram_business_account) {
          const instagramAccountResponse = await fetch(
            `https://graph.facebook.com/v21.0/${instagramData.instagram_business_account.id}?fields=id,username&access_token=${firstPage.access_token}`
          );
          const instagramAccountData = await instagramAccountResponse.json();
          instagramInfo = instagramAccountData;
        }
      } catch (error) {
        console.warn('Could not fetch Instagram info:', error);
      }
    }

    // Save Facebook credentials to Firestore
    const db = admin.firestore();
    const credentialData = {
      type: 'facebook',
      accessToken: accessToken,
      pageId: pagesData.data?.[0]?.id || '',
      pageName: pagesData.data?.[0]?.name || '',
      expiresIn: expiresIn,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      lastValidated: admin.firestore.FieldValue.serverTimestamp(),
      isActive: true,
      metadata: {
        source: 'oauth',
        autoGenerated: true
      }
    };

    await db
      .collection('users')
      .doc(userId)
      .collection('credentials')
      .doc('facebook')
      .set(credentialData);

    // Save Instagram credentials if available
    if (instagramInfo) {
      const instagramCredentialData = {
        type: 'instagram',
        accessToken: accessToken,
        instagramUserId: instagramInfo.id,
        username: instagramInfo.username,
        expiresIn: expiresIn,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        lastValidated: admin.firestore.FieldValue.serverTimestamp(),
        isActive: true,
        metadata: {
          source: 'oauth',
          autoGenerated: true
        }
      };

      await db
        .collection('users')
        .doc(userId)
        .collection('credentials')
        .doc('instagram')
        .set(instagramCredentialData);
    }

    res.json({
      success: true,
      accessToken,
      expiresIn,
      scope: tokenData.scope,
      userInfo: {
        id: userData.id,
        name: userData.name,
        email: userData.email || '',
        pages: pagesData.data || [],
        instagramInfo
      }
    });
  } catch (error) {
    console.error('Facebook OAuth error:', error);
    res.status(500).json({
      error: 'Internal server error'
    });
  }
});
